"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import psutil
import os
from datetime import datetime
from aiogram import Bot
from config import BOT_TOKEN, ADMIN_IDS
from db import db
from utils.logger import logger

bot = Bot(token=BOT_TOKEN)

async def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    return {
        'cpu': cpu_percent,
        'memory_percent': memory.percent,
        'memory_used': memory.used / (1024**3),  # GB
        'memory_total': memory.total / (1024**3),  # GB
        'disk_percent': disk.percent,
        'disk_used': disk.used / (1024**3),  # GB
        'disk_total': disk.total / (1024**3),  # GB
    }

async def get_bot_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    try:
        await db.create_pool()
        stats = await db.get_statistics()
        await db.close()
        return stats
    except Exception as e:
        logger.error(f"Error getting bot stats: {e}")
        return {}

async def send_monitoring_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"""
    try:
        system_info = await get_system_info()
        bot_stats = await get_bot_stats()
        
        report = (
            f"üìä <b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n"
            f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            
            f"<b>üíª –°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"CPU: {system_info['cpu']:.1f}%\n"
            f"RAM: {system_info['memory_used']:.1f}/{system_info['memory_total']:.1f} GB ({system_info['memory_percent']:.1f}%)\n"
            f"Disk: {system_info['disk_used']:.1f}/{system_info['disk_total']:.1f} GB ({system_info['disk_percent']:.1f}%)\n\n"
            
            f"<b>ü§ñ –ë–æ—Ç:</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_stats.get('total_users', 0)}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö (7–¥): {bot_stats.get('active_users', 0)}\n"
            f"–ó–∞–¥–∞—á –≤—Å–µ–≥–æ: {bot_stats.get('total_tasks', 0)}\n"
            f"–í –æ–∂–∏–¥–∞–Ω–∏–∏: {bot_stats.get('pending_tasks', 0)}\n"
            f"–û–¥–æ–±—Ä–µ–Ω–æ: {bot_stats.get('approved_tasks', 0)}\n"
        )
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = []
        if system_info['cpu'] > 80:
            warnings.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU!")
        if system_info['memory_percent'] > 80:
            warnings.append("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM!")
        if system_info['disk_percent'] > 80:
            warnings.append("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!")
        
        if warnings:
            report += "\n<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n" + "\n".join(warnings)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, report, parse_mode='HTML')
            except Exception as e:
                logger.error(f"Error sending report to admin {admin_id}: {e}")
        
        logger.info("Monitoring report sent successfully")
        
    except Exception as e:
        logger.error(f"Error in monitoring: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(send_monitoring_report())