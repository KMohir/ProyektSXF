import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated

from config import BOT_TOKEN, ADMIN_IDS, MESSAGES
from db import db
from sheets import sheets_manager
from keyboards import (
    get_contact_keyboard, 
    get_main_menu_keyboard,
    get_admin_menu_keyboard,
    get_projects_keyboard, 
    get_tasks_keyboard, 
    get_admin_keyboard,
    get_task_status_keyboard,
    get_add_note_keyboard
)
from utils.logger import logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_contact = State()

class TaskSelectionStates(StatesGroup):
    selecting_project = State()
    selecting_task = State()

class NoteStates(StatesGroup):
    writing_note = State()

class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (aiogram 2.x)."""

    async def on_pre_process_message(self, message: types.Message, data: dict):
        logger.info(f"Message from {message.from_user.id}: {message.text}")

    async def on_pre_process_callback_query(self, callback_query: types.CallbackQuery, data: dict):
        logger.info(f"Callback from {callback_query.from_user.id}: {callback_query.data}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.middleware.setup(LoggingMiddleware())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {exception}")
    
    if isinstance(exception, (BotBlocked, ChatNotFound, UserDeactivated)):
        logger.warning(f"User blocked the bot or chat not found")
        return True
    
    return False

@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.finish()
    
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if user:
        is_admin = user_id in ADMIN_IDS
        keyboard = get_admin_menu_keyboard() if is_admin else get_main_menu_keyboard()
        
        await message.answer(
            MESSAGES['welcome_back'].format(name=user['name']),
            reply_markup=keyboard
        )
    else:
        await message.answer(
            MESSAGES['welcome_new'],
            reply_markup=get_contact_keyboard()
        )
        await RegistrationStates.waiting_for_contact.set()

@dp.message_handler(commands=['help'], state='*')
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "<b>–ö–Ω–æ–ø–∫–∏:</b>\n"
        "üìã –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç - –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–¥–∞—á–∏\n"
        "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á\n"
    )
    
    if message.from_user.id in ADMIN_IDS:
        help_text += (
            "\n<b>–ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É\n"
            "üìë –í—Å–µ –∑–∞–¥–∞—á–∏ - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á\n"
        )
    
    await message.answer(help_text)

@dp.message_handler(commands=['cancel'], state='*')
async def cancel_command(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.finish()
    user = await db.get_user(message.from_user.id)
    
    if user:
        is_admin = message.from_user.id in ADMIN_IDS
        keyboard = get_admin_menu_keyboard() if is_admin else get_main_menu_keyboard()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
    else:
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message_handler(content_types=['contact'], state=RegistrationStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    user_id = message.from_user.id
    
    if contact.user_id != user_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.",
            reply_markup=get_contact_keyboard()
        )
        return
    
    name = f"{contact.first_name} {contact.last_name or ''}".strip()
    phone = contact.phone_number
    
    success = await db.register_user(user_id, name, phone)
    
    if success:
        is_admin = user_id in ADMIN_IDS
        keyboard = get_admin_menu_keyboard() if is_admin else get_main_menu_keyboard()
        
        await message.answer(
            MESSAGES['registration_success'].format(name=name, phone=phone),
            reply_markup=keyboard
        )
        await state.finish()
    else:
        await message.answer(
            MESSAGES['registration_error'],
            reply_markup=get_contact_keyboard()
        )

@dp.message_handler(lambda message: message.text == "üìã –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", state='*')
async def select_project(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(MESSAGES['not_registered'])
        return
    
    projects = await sheets_manager.get_project_names()
    
    if not projects:
        await message.answer(MESSAGES['no_projects'])
        return
    
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
        reply_markup=get_projects_keyboard(projects)
    )
    await TaskSelectionStates.selecting_project.set()

@dp.message_handler(lambda message: message.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏", state='*')
async def my_tasks(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(MESSAGES['not_registered'])
        return
    
    tasks = await db.get_user_tasks(user_id)
    
    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    response = "<b>üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    
    status_emoji = {
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'rejected': '‚ùå',
        'completed': 'üéâ'
    }
    
    for task in tasks:
        emoji = status_emoji.get(task['status'], '‚ùì')
        response += (
            f"{emoji} <b>{task['project_name']}</b>\n"
            f"üìù {task['task_name']}\n"
            f"–°—Ç–∞—Ç—É—Å: {task['status']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {task['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    await message.answer(response)


@dp.message_handler(lambda message: message.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", state='*')
async def start_write_data_from_main_menu(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.finish()

    user_id = message.from_user.id
    user = await db.get_user(user_id)
    if not user:
        await message.answer(MESSAGES['not_registered'])
        return

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –û–î–û–ë–†–ï–ù–ù–£–Æ –∑–∞–¥–∞—á—É
    tasks = await db.get_user_tasks(user_id, status='approved')
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")
        return

    latest = tasks[0]
    project_name = latest['project_name']
    task_index = latest['task_index']

    await state.update_data(note_project=project_name, note_task_index=task_index)
    await NoteStates.writing_note.set()
    await message.answer(
        f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü K\n"
        f"–ü—Ä–æ–µ–∫—Ç: <b>{project_name}</b>, –∑–∞–¥–∞—á–∞ #{task_index + 1}",
        parse_mode='HTML'
    )

@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state='*')
async def show_statistics(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    await state.finish()
    
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    stats = await db.get_statistics()
    
    if not stats:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return
    
    response = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {stats.get('active_users', 0)}\n\n"
        f"<b>–ó–∞–¥–∞—á–∏:</b>\n"
        f"üìã –í—Å–µ–≥–æ: {stats.get('total_tasks', 0)}\n"
        f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats.get('pending_tasks', 0)}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('approved_tasks', 0)}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected_tasks', 0)}\n"
        f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.get('completed_tasks', 0)}\n"
    )
    
    if stats.get('top_projects'):
        response += "\n<b>–¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>\n"
        for project in stats['top_projects']:
            response += f"‚Ä¢ {project['project_name']}: {project['count']}\n"
    
    await message.answer(response)

@dp.message_handler(lambda message: message.text == "üìë –í—Å–µ –∑–∞–¥–∞—á–∏", state='*')
async def all_tasks(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    await state.finish()
    
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    tasks = await db.get_all_tasks(limit=50)
    
    if not tasks:
        await message.answer("–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    response = "<b>üìë –í—Å–µ –∑–∞–¥–∞—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):</b>\n\n"
    
    status_emoji = {
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'rejected': '‚ùå',
        'completed': 'üéâ'
    }
    
    for task in tasks[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        emoji = status_emoji.get(task['status'], '‚ùì')
        response += (
            f"{emoji} <b>{task['name']}</b> ({task['phone']})\n"
            f"üìã {task['project_name']}\n"
            f"üìù {task['task_name'][:50]}...\n"
            f"–°—Ç–∞—Ç—É—Å: {task['status']}\n\n"
        )
    
    if len(tasks) > 20:
        response += f"\n... –∏ –µ—â–µ {len(tasks) - 20} –∑–∞–¥–∞—á"
    
    await message.answer(response)

@dp.callback_query_handler(lambda c: c.data.startswith('project_'), state=TaskSelectionStates.selecting_project)
async def process_project_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_name = callback_query.data.replace('project_', '')
    await state.update_data(selected_project=project_name)
    
    tasks = await sheets_manager.get_tasks_from_project(project_name)
    
    if not tasks:
        await callback_query.message.edit_text(
            MESSAGES['no_tasks'].format(project=project_name)
        )
        await state.finish()
        return
    
    await callback_query.message.edit_text(
        f"üìã –ü—Ä–æ–µ–∫—Ç: <b>{project_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:",
        reply_markup=get_tasks_keyboard(tasks, project_name)
    )
    await TaskSelectionStates.selecting_task.set()

@dp.callback_query_handler(lambda c: c.data.startswith('task_'), state=TaskSelectionStates.selecting_task)
async def process_task_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏"""
    parts = callback_query.data.split('_', 2)
    if len(parts) < 3:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏")
        return
    
    project_name = parts[1]
    task_index = int(parts[2])
    
    user_id = callback_query.from_user.id
    user = await db.get_user(user_id)
    task_name = await sheets_manager.get_task_by_index(project_name, task_index)
    
    if not task_name:
        await callback_query.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    task_id = await db.create_task_request(user_id, project_name, task_name, task_index)
    
    if not task_id:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    await callback_query.message.edit_text(
        MESSAGES['request_sent'].format(project=project_name, task=task_name)
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç–æ–ª–±–µ—Ü K)
    try:
        await bot.send_message(
            user_id,
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ? –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å—Ç–æ–ª–±–µ—Ü K –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
            reply_markup=get_add_note_keyboard(project_name, task_index)
        )
    except Exception as e:
        logger.error(f"Error sending add-note prompt to user {user_id}: {e}")
    
    admin_message = MESSAGES['admin_new_request'].format(
        name=user['name'],
        phone=user['phone'],
        user_id=user_id,
        project=project_name,
        task=task_name
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_message,
                reply_markup=get_admin_keyboard(user_id, project_name, task_index)
            )
        except Exception as e:
            logger.error(f"Error sending message to admin {admin_id}: {e}")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "back_to_projects", state=TaskSelectionStates.selecting_task)
async def back_to_projects(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    projects = await sheets_manager.get_project_names()
    
    await callback_query.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
        reply_markup=get_projects_keyboard(projects)
    )
    await TaskSelectionStates.selecting_project.set()


@dp.callback_query_handler(lambda c: c.data.startswith('addnote_'), state='*')
async def start_add_note(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∑–∞–ø–∏—Å—å –≤ K-—Å—Ç–æ–ª–±–µ—Ü)."""
    try:
        parts = callback_query.data.split('_', 2)
        if len(parts) < 3:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        project_name = parts[1]
        task_index = int(parts[2])

        # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        user_id = callback_query.from_user.id
        approved_tasks = await db.get_user_tasks(user_id, status='approved')
        is_approved = any(t['project_name'] == project_name and t['task_index'] == task_index for t in approved_tasks)

        if not is_approved:
            await callback_query.answer("–ó–∞–¥–∞—á–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return

        await state.update_data(note_project=project_name, note_task_index=task_index)
        await NoteStates.writing_note.set()
        await callback_query.message.edit_text(
            f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ <b>{project_name}</b>, –∑–∞–¥–∞—á–∞ #{task_index + 1}"
        )
    except Exception as e:
        logger.error(f"Error starting add note: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")


@dp.message_handler(state=NoteStates.writing_note, content_types=types.ContentTypes.TEXT)
async def receive_note_and_save(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–æ–ª–±–µ—Ü K."""
    user_text = message.text.strip()
    if not user_text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return

    data = await state.get_data()
    project_name = data.get('note_project')
    task_index = data.get('note_task_index')

    if project_name is None or task_index is None:
        await state.finish()
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
    approved_tasks = await db.get_user_tasks(message.from_user.id, status='approved')
    is_approved = any(t['project_name'] == project_name and t['task_index'] == int(task_index) for t in approved_tasks)

    if not is_approved:
        await state.finish()
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    success = await sheets_manager.write_note_to_column_k(project_name, int(task_index), user_text)
    if success:
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å—Ç–æ–ª–±—Ü–µ K.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def process_admin_decision(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    parts = callback_query.data.split('_')
    action = parts[0]
    user_id = int(parts[1])
    project_name = parts[2]
    task_index = int(parts[3])
    
    user = await db.get_user(user_id)
    task_name = await sheets_manager.get_task_by_index(project_name, task_index)
    
    if action == 'approve':
        await db.update_task_status(user_id, project_name, task_index, 'approved', callback_query.from_user.id)
        
        success = await sheets_manager.assign_task_to_user(
            project_name, task_index, user['name'], user['phone']
        )
        
        if success:
            await callback_query.message.edit_text(
                MESSAGES['admin_approved'].format(
                    name=user['name'],
                    phone=user['phone'],
                    project=project_name,
                    task=task_name
                )
            )
            
            try:
                await bot.send_message(
                    user_id,
                    MESSAGES['request_approved'].format(project=project_name, task=task_name)
                )
                # –ü—Ä–µ–¥–ª–æ–∂–∏–º —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∑–∞–ø–∏—Å—å –≤ —Å—Ç–æ–ª–±–µ—Ü K)
                await bot.send_message(
                    user_id,
                    "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ ‚Äî –æ–Ω –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç–æ–ª–±–µ—Ü K.",
                    reply_markup=get_add_note_keyboard(project_name, task_index)
                )
            except Exception as e:
                logger.error(f"Error sending approval message to user {user_id}: {e}")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
    
    else:
        await db.update_task_status(user_id, project_name, task_index, 'rejected', callback_query.from_user.id)
        
        await callback_query.message.edit_text(
            MESSAGES['admin_rejected'].format(
                name=user['name'],
                phone=user['phone'],
                project=project_name,
                task=task_name
            )
        )
        
        try:
            await bot.send_message(
                user_id,
                MESSAGES['request_rejected'].format(project=project_name, task=task_name)
            )
        except Exception as e:
            logger.error(f"Error sending rejection message to user {user_id}: {e}")

async def on_startup(dp):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    
    try:
        await db.create_pool()
        await sheets_manager.initialize()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            except:
                pass
        
        logger.info("Bot started successfully!")
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise

async def on_shutdown(dp):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Shutting down bot...")
    
    try:
        await db.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, "ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except:
                pass
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    
    logger.info("Bot stopped")

if __name__ == '__main__':
    executor.start_polling(
        dp, 
        on_startup=on_startup, 
        on_shutdown=on_shutdown, 
        skip_updates=True,
        timeout=60
    )